// <auto-generated />
using System;
using HarborRestaurant.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HarborRestaurant.Migrations
{
    [DbContext(typeof(HarborDbContext))]
    [Migration("20250813010748_AddEnglishTranslationFields")]
    partial class AddEnglishTranslationFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HarborRestaurant.Entities.Concrete.About", b =>
                {
                    b.Property<int>("AboutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AboutId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("AboutId");

                    b.ToTable("Abouts");

                    b.HasData(
                        new
                        {
                            AboutId = 1,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 462, DateTimeKind.Local).AddTicks(4622),
                            Description = "Harbor Restaurant olarak 1998 yılından beri müşterilerimize kaliteli hizmet vermekteyiz. Deniz manzarası eşliğinde, taze deniz ürünleri ve özel etlerle hazırladığımız lezzetleri sizlere sunuyoruz.",
                            ImageUrl = "/images/about.jpg",
                            IsActive = true,
                            Subtitle = "25 Yıllık Deneyim",
                            Title = "Hakkımızda",
                            VideoUrl = "https://vimeo.com/45830194"
                        });
                });

            modelBuilder.Entity("HarborRestaurant.Entities.Concrete.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("HarborRestaurant.Entities.Concrete.BlogCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.ToTable("BlogCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 463, DateTimeKind.Local).AddTicks(1956),
                            Description = "Restaurant haberleri",
                            IsActive = true,
                            Name = "Haberler",
                            SortOrder = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 463, DateTimeKind.Local).AddTicks(2116),
                            Description = "Özel etkinlikler",
                            IsActive = true,
                            Name = "Etkinlikler",
                            SortOrder = 2
                        },
                        new
                        {
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 463, DateTimeKind.Local).AddTicks(2118),
                            Description = "Şef tarifleri",
                            IsActive = true,
                            Name = "Tarifler",
                            SortOrder = 3
                        });
                });

            modelBuilder.Entity("HarborRestaurant.Entities.Concrete.BlogPost", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<string>("Author")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Summary")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("SummaryEn")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TitleEn")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("PostId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedDate");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("HarborRestaurant.Entities.Concrete.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MapLatitude")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MapLongitude")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MapUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkingHours")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            ContactId = 1,
                            Address = "Atatürk Bulvarı No:123, Alsancak/İzmir",
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 462, DateTimeKind.Local).AddTicks(6332),
                            Email = "info@harborrestaurant.com",
                            IsActive = true,
                            MapUrl = "https://goo.gl/maps/xyz",
                            Phone = "+90 232 123 45 67",
                            WorkingHours = "Pazartesi - Pazar: 11:00 - 24:00"
                        });
                });

            modelBuilder.Entity("HarborRestaurant.Entities.Concrete.ContactMessage", b =>
                {
                    b.Property<int>("ContactMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactMessageId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReplied")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReplyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ContactMessageId");

                    b.HasIndex("Email");

                    b.ToTable("ContactMessages");
                });

            modelBuilder.Entity("HarborRestaurant.Entities.Concrete.HomePage", b =>
                {
                    b.Property<int>("HomePageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HomePageId"));

                    b.Property<string>("ButtonText")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ButtonUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("HeroImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MainTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Subtitle")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("HomePageId");

                    b.ToTable("HomePages");

                    b.HasData(
                        new
                        {
                            HomePageId = 1,
                            ButtonText = "Rezervasyon Yap",
                            ButtonUrl = "/Reservation",
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 461, DateTimeKind.Local).AddTicks(8856),
                            Description = "Harbor Restaurant olarak, deniz ürünlerinden et yemeklerine kadar geniş bir menü yelpazesi ile hizmet vermekteyiz.",
                            HeroImageUrl = "/images/bg_1.jpg",
                            IsActive = true,
                            MainTitle = "Harbor Restaurant'a Hoş Geldiniz",
                            Subtitle = "Deniz Manzarası Eşliğinde Eşsiz Lezzetler"
                        });
                });

            modelBuilder.Entity("HarborRestaurant.Entities.Concrete.MenuCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.ToTable("MenuCategories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 462, DateTimeKind.Local).AddTicks(8064),
                            Description = "Nefis başlangıç lezzetleri",
                            DisplayOrder = 0,
                            IsActive = true,
                            Name = "Başlangıçlar",
                            SortOrder = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 462, DateTimeKind.Local).AddTicks(8222),
                            Description = "Taze deniz ürünleri",
                            DisplayOrder = 0,
                            IsActive = true,
                            Name = "Deniz Ürünleri",
                            SortOrder = 2
                        },
                        new
                        {
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 462, DateTimeKind.Local).AddTicks(8224),
                            Description = "Özel et yemekleri",
                            DisplayOrder = 0,
                            IsActive = true,
                            Name = "Et Yemekleri",
                            SortOrder = 3
                        },
                        new
                        {
                            CategoryId = 4,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 462, DateTimeKind.Local).AddTicks(8226),
                            Description = "Ev yapımı tatlılar",
                            DisplayOrder = 0,
                            IsActive = true,
                            Name = "Tatlılar",
                            SortOrder = 4
                        },
                        new
                        {
                            CategoryId = 5,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 462, DateTimeKind.Local).AddTicks(8227),
                            Description = "Soğuk ve sıcak içecekler",
                            DisplayOrder = 0,
                            IsActive = true,
                            Name = "İçecekler",
                            SortOrder = 5
                        });
                });

            modelBuilder.Entity("HarborRestaurant.Entities.Concrete.MenuItem", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<int?>("Calories")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DescriptionEn")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Ingredients")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpecial")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpicy")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("PreparationTime")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ItemId");

                    b.HasIndex("CategoryId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            ItemId = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 463, DateTimeKind.Local).AddTicks(80),
                            Description = "Taze deniz börülcesi salatası",
                            ImageUrl = "/images/menu-1.jpg",
                            IsActive = true,
                            IsAvailable = true,
                            IsFeatured = false,
                            IsSpecial = true,
                            IsSpicy = false,
                            Name = "Deniz Börülcesi",
                            Price = 85.00m,
                            SortOrder = 0
                        },
                        new
                        {
                            ItemId = 2,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 463, DateTimeKind.Local).AddTicks(232),
                            Description = "Avokado eşliğinde karides",
                            ImageUrl = "/images/menu-2.jpg",
                            IsActive = true,
                            IsAvailable = true,
                            IsFeatured = false,
                            IsSpecial = false,
                            IsSpicy = false,
                            Name = "Karides Kokteyli",
                            Price = 125.00m,
                            SortOrder = 0
                        },
                        new
                        {
                            ItemId = 3,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 463, DateTimeKind.Local).AddTicks(234),
                            Description = "Taze levrek balığı ızgara",
                            ImageUrl = "/images/menu-3.jpg",
                            IsActive = true,
                            IsAvailable = true,
                            IsFeatured = false,
                            IsSpecial = true,
                            IsSpicy = false,
                            Name = "Levrek Izgara",
                            Price = 185.00m,
                            SortOrder = 0
                        },
                        new
                        {
                            ItemId = 4,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 463, DateTimeKind.Local).AddTicks(236),
                            Description = "Özel soslu somon fileto",
                            ImageUrl = "/images/menu-4.jpg",
                            IsActive = true,
                            IsAvailable = true,
                            IsFeatured = false,
                            IsSpecial = false,
                            IsSpicy = false,
                            Name = "Somon Teriyaki",
                            Price = 225.00m,
                            SortOrder = 0
                        },
                        new
                        {
                            ItemId = 5,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 463, DateTimeKind.Local).AddTicks(238),
                            Description = "200gr dana bonfile, garnitür eşliğinde",
                            ImageUrl = "/images/menu-5.jpg",
                            IsActive = true,
                            IsAvailable = true,
                            IsFeatured = false,
                            IsSpecial = true,
                            IsSpicy = false,
                            Name = "Dana Bonfile",
                            Price = 285.00m,
                            SortOrder = 0
                        },
                        new
                        {
                            ItemId = 6,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 463, DateTimeKind.Local).AddTicks(240),
                            Description = "Özel marine kuzu pirzola",
                            ImageUrl = "/images/menu-6.jpg",
                            IsActive = true,
                            IsAvailable = true,
                            IsFeatured = false,
                            IsSpecial = false,
                            IsSpicy = false,
                            Name = "Kuzu Pirzola",
                            Price = 245.00m,
                            SortOrder = 0
                        },
                        new
                        {
                            ItemId = 7,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 463, DateTimeKind.Local).AddTicks(261),
                            Description = "Ev yapımı tiramisu",
                            ImageUrl = "/images/menu-7.jpg",
                            IsActive = true,
                            IsAvailable = true,
                            IsFeatured = false,
                            IsSpecial = false,
                            IsSpicy = false,
                            Name = "Tiramisu",
                            Price = 65.00m,
                            SortOrder = 0
                        },
                        new
                        {
                            ItemId = 8,
                            CategoryId = 4,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 463, DateTimeKind.Local).AddTicks(263),
                            Description = "Sıcak çikolata sufle",
                            ImageUrl = "/images/menu-8.jpg",
                            IsActive = true,
                            IsAvailable = true,
                            IsFeatured = false,
                            IsSpecial = false,
                            IsSpicy = false,
                            Name = "Çikolata Sufle",
                            Price = 75.00m,
                            SortOrder = 0
                        },
                        new
                        {
                            ItemId = 9,
                            CategoryId = 5,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 463, DateTimeKind.Local).AddTicks(303),
                            Description = "Günün özel kokteyli",
                            ImageUrl = "/images/menu-9.jpg",
                            IsActive = true,
                            IsAvailable = true,
                            IsFeatured = false,
                            IsSpecial = false,
                            IsSpicy = false,
                            Name = "Şef Özel Kokteylli",
                            Price = 95.00m,
                            SortOrder = 0
                        });
                });

            modelBuilder.Entity("HarborRestaurant.Entities.Concrete.Reservation", b =>
                {
                    b.Property<int>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationId"));

                    b.Property<string>("AdminNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("GuestCount")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<TimeOnly>("ReservationTime")
                        .HasColumnType("time");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialRequests")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TableId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReservationId");

                    b.HasIndex("Email");

                    b.HasIndex("RoomId");

                    b.HasIndex("TableId");

                    b.HasIndex("CheckInDate", "ReservationTime");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("HarborRestaurant.Entities.Concrete.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Features")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MinimumOrderAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int>("StarRating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoomId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomId = 1,
                            Capacity = 15,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 463, DateTimeKind.Local).AddTicks(8234),
                            Description = "8-15 kişilik kapasiteye sahip Aile Salonu, aile toplantıları ve özel kutlamalar için ideal.",
                            Features = "Rahat oturma düzeni, Özel menü seçenekleri, Çocuk dostu ortam",
                            ImageUrl = "/images/room-1.jpg",
                            IsActive = true,
                            MinimumOrderAmount = 200m,
                            Name = "Aile Salonu",
                            SortOrder = 1,
                            StarRating = 5
                        },
                        new
                        {
                            RoomId = 2,
                            Capacity = 25,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 463, DateTimeKind.Local).AddTicks(8538),
                            Description = "15-25 kişilik kapasiteye sahip Lüks Salon, özel etkinlikler ve iş yemekleri için mükemmel.",
                            Features = "Şık dekorasyon, Konforlu atmosfer, Özel servis",
                            ImageUrl = "/images/room-2.jpg",
                            IsActive = true,
                            MinimumOrderAmount = 300m,
                            Name = "Lüks Salon",
                            SortOrder = 2,
                            StarRating = 5
                        },
                        new
                        {
                            RoomId = 3,
                            Capacity = 50,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 463, DateTimeKind.Local).AddTicks(8542),
                            Description = "30-50 kişilik kapasiteye sahip Konferans Salonu, kurumsal etkinlikler için ideal.",
                            Features = "Projeksiyon sistemi, Sesli sistem, Klima",
                            ImageUrl = "/images/room-3.jpg",
                            IsActive = true,
                            MinimumOrderAmount = 350m,
                            Name = "Konferans Salonu",
                            SortOrder = 3,
                            StarRating = 5
                        },
                        new
                        {
                            RoomId = 4,
                            Capacity = 35,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 463, DateTimeKind.Local).AddTicks(8544),
                            Description = "20-35 kişilik kapasiteye sahip muhteşem deniz manzaralı salon.",
                            Features = "Deniz manzarası, Doğal ışık, Fotoğraf çekimi için ideal",
                            ImageUrl = "/images/room-4.jpg",
                            IsActive = true,
                            MinimumOrderAmount = 400m,
                            Name = "Deniz Manzaralı Salon",
                            SortOrder = 4,
                            StarRating = 5
                        },
                        new
                        {
                            RoomId = 5,
                            Capacity = 60,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 463, DateTimeKind.Local).AddTicks(8546),
                            Description = "40-60 kişilik kapasiteye sahip açık havada hizmet veren bahçe salonu.",
                            Features = "Açık hava, Bahçe manzarası, Doğal ortam",
                            ImageUrl = "/images/room-5.jpg",
                            IsActive = true,
                            MinimumOrderAmount = 250m,
                            Name = "Bahçe Salonu",
                            SortOrder = 5,
                            StarRating = 5
                        },
                        new
                        {
                            RoomId = 6,
                            Capacity = 20,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 463, DateTimeKind.Local).AddTicks(8548),
                            Description = "10-20 kişilik kapasiteye sahip özel VIP salon, lüks hizmet.",
                            Features = "VIP servis, Özel menü, Lüks donanım",
                            ImageUrl = "/images/room-6.jpg",
                            IsActive = true,
                            MinimumOrderAmount = 500m,
                            Name = "VIP Salon",
                            SortOrder = 6,
                            StarRating = 5
                        });
                });

            modelBuilder.Entity("HarborRestaurant.Entities.Concrete.Table", b =>
                {
                    b.Property<int>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TableId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TableNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TableId");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            TableId = 1,
                            Capacity = 2,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 463, DateTimeKind.Local).AddTicks(4396),
                            IsActive = true,
                            IsAvailable = true,
                            Location = "Pencere kenarı",
                            TableNumber = "1"
                        },
                        new
                        {
                            TableId = 2,
                            Capacity = 4,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 463, DateTimeKind.Local).AddTicks(4685),
                            IsActive = true,
                            IsAvailable = true,
                            Location = "Merkez",
                            TableNumber = "2"
                        },
                        new
                        {
                            TableId = 3,
                            Capacity = 6,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 463, DateTimeKind.Local).AddTicks(4688),
                            IsActive = true,
                            IsAvailable = true,
                            Location = "Terasta",
                            TableNumber = "3"
                        },
                        new
                        {
                            TableId = 4,
                            Capacity = 8,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 463, DateTimeKind.Local).AddTicks(4690),
                            IsActive = true,
                            IsAvailable = true,
                            Location = "VIP",
                            TableNumber = "4"
                        },
                        new
                        {
                            TableId = 5,
                            Capacity = 2,
                            CreatedDate = new DateTime(2025, 8, 13, 4, 7, 47, 463, DateTimeKind.Local).AddTicks(4692),
                            IsActive = true,
                            IsAvailable = true,
                            Location = "Pencere kenarı",
                            TableNumber = "5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HarborRestaurant.Entities.Concrete.BlogPost", b =>
                {
                    b.HasOne("HarborRestaurant.Entities.Concrete.BlogCategory", "Category")
                        .WithMany("BlogPosts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("HarborRestaurant.Entities.Concrete.MenuItem", b =>
                {
                    b.HasOne("HarborRestaurant.Entities.Concrete.MenuCategory", "Category")
                        .WithMany("MenuItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("HarborRestaurant.Entities.Concrete.Reservation", b =>
                {
                    b.HasOne("HarborRestaurant.Entities.Concrete.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HarborRestaurant.Entities.Concrete.Table", "Table")
                        .WithMany("Reservations")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Room");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HarborRestaurant.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HarborRestaurant.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HarborRestaurant.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HarborRestaurant.Entities.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HarborRestaurant.Entities.Concrete.BlogCategory", b =>
                {
                    b.Navigation("BlogPosts");
                });

            modelBuilder.Entity("HarborRestaurant.Entities.Concrete.MenuCategory", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("HarborRestaurant.Entities.Concrete.Table", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
